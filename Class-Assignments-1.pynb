{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "aa7e02b2-e8f3-4319-ac03-0deb23063a82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Machine Learning\n",
      "Neural Networks\n",
      "Robotics\n",
      "Vision\n",
      "Speech processing\n",
      "Natural Language Processing\n",
      "\n"
     ]
    }
   ],
   "source": [
    "class SubfieldsInAI:\n",
    "    def subfields(self):\n",
    "        print(\"Machine Learning\\n\"\n",
    "              \"Neural Networks\\n\"\n",
    "              \"Robotics\\n\"\n",
    "              \"Vision\\n\"\n",
    "              \"Speech processing\\n\"\n",
    "              \"Natural Language Processing\\n\")\n",
    "obj=SubfieldsInAI()\n",
    "obj.subfields()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b118f872-ca14-4db7-ae75-adba72857bed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number 52452\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Even number\n"
     ]
    }
   ],
   "source": [
    "def OddEven():\n",
    "    oddeven=int(input(\"Enter the number\"))\n",
    "    if (oddeven%2==0):\n",
    "       print(\"Even number\")\n",
    "       message = \"Even number\"\n",
    "    else:\n",
    "       print(\"Odd number\")\n",
    "       message=(\"Odd number\")\n",
    "    return message\n",
    "message=OddEven()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "114f780a-4021-4e00-afbd-e0bdfcc604fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your Gender Female\n",
      "Enter your Age 17\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not eligible for marriage\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Not eligible for marriage'"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class ElegiblityForMarriage:\n",
    "    def Eligible(self):\n",
    "        Gender=input(\"Enter your Gender\")\n",
    "        age=int(input(\"Enter your Age\"))\n",
    "        if Gender ==\"Male\" and age==21:\n",
    "            print(\"Eligible for Male Marriage\")\n",
    "            message=\"Eligible for Male Marriage\"\n",
    "        elif Gender==\"Female\" and age==18:\n",
    "            print(\"Eligible for Female Marriage\")\n",
    "            message=\"Eligible for Female Marriage\"\n",
    "        else:\n",
    "            print(\"Not eligible for marriage\")\n",
    "            message=\"Not eligible for marriage\"\n",
    "        return message\n",
    "obj=ElegiblityForMarriage()\n",
    "obj.Eligible()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "db371d72-99ef-4dc4-ac8c-0926d5d089f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of 10th mark is: 93.6\n"
     ]
    }
   ],
   "source": [
    "class FindPercent:\n",
    "    def percentage(self):\n",
    "        Subject1= 98\n",
    "        Subject2= 87\n",
    "        Subject3= 95\n",
    "        Subject4= 95\n",
    "        Subject5= 93\n",
    "        marks=[Subject1,Subject2,Subject3,Subject4,Subject5]\n",
    "        Total = sum(marks)\n",
    "        average=sum(marks)/len(marks)\n",
    "        print(f\"Percentage of 10th mark is: {average}\")\n",
    "obj=FindPercent()\n",
    "obj.percentage()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "fc4d70b2-8722-4595-af5a-207cd382c6c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "544.0\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "class triangle:\n",
    "    def Areatriangle(self):\n",
    "        Height=32\n",
    "        Breadth=34\n",
    "        Areaformula= (Height*Breadth)/2\n",
    "        print(Areaformula)\n",
    "    def perm_triangle(self):\n",
    "        Height1=2\n",
    "        Height2=4\n",
    "        Breadth=4\n",
    "        Perimeterformula= Height1+Height2+Breadth\n",
    "        print(Perimeterformula)\n",
    "obj=triangle()\n",
    "obj.Areatriangle()\n",
    "obj.perm_triangle()\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18f84562-777c-470a-9b68-ec245ff31cc8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
